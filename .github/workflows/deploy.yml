name: Deploy Booklub Prod

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-deploy

      - name: Install Serverless
        run: npm i -g serverless@3

      - name: Ensure Google OAuth SSM parameters exist
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          if ! aws ssm get-parameter --name "/bookclub/oauth/google_client_id" >/dev/null 2>&1; then
            aws ssm put-parameter \
              --name "/bookclub/oauth/google_client_id" \
              --type String \
              --value "$GOOGLE_CLIENT_ID"
          else
            echo "SSM parameter /bookclub/oauth/google_client_id already exists; not overwriting to preserve version 1"
          fi
          if ! aws ssm get-parameter --name "/bookclub/oauth/google_client_secret" --with-decryption >/dev/null 2>&1; then
            aws ssm put-parameter \
              --name "/bookclub/oauth/google_client_secret" \
              --type SecureString \
              --value "$GOOGLE_CLIENT_SECRET"
          else
            echo "SSM parameter /bookclub/oauth/google_client_secret already exists; not overwriting to preserve version 1"
          fi

      - name: Backend deps
        working-directory: bookclub-app/backend
        run: npm ci

      - name: Deploy backend (Serverless)
        working-directory: bookclub-app/backend
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: npx serverless deploy --stage prod

      - name: Build frontend
        working-directory: bookclub-app/frontend
        env:
          # Use API custom domain; the deploy script also writes .env.production but we set here explicitly for CI
          REACT_APP_API_URL: https://api.booklub.shop
          REACT_APP_COGNITO_REGION: us-east-1
          # Optional: You can fetch these dynamically via serverless info if desired
          # For simplicity in CI, you may store them as secrets
          REACT_APP_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
          REACT_APP_COGNITO_DOMAIN: booklub-prod.auth.us-east-1.amazoncognito.com
          REACT_APP_OAUTH_REDIRECT_SIGNIN: https://booklub.shop/auth/callback
          REACT_APP_OAUTH_REDIRECT_SIGNOUT: https://booklub.shop/
          REACT_APP_OAUTH_SCOPES: "openid email profile"
          REACT_APP_OAUTH_RESPONSE_TYPE: code
        run: |
          npm ci
          npm run build

      - name: Ensure frontend S3 bucket exists
        env:
          FRONTEND_S3_BUCKET: ${{ secrets.FRONTEND_S3_BUCKET }}
        run: |
          set -euo pipefail
          if aws s3api head-bucket --bucket "$FRONTEND_S3_BUCKET" 2>/dev/null; then
            echo "Frontend bucket exists: $FRONTEND_S3_BUCKET"
          else
            echo "Creating frontend bucket: $FRONTEND_S3_BUCKET"
            aws s3api create-bucket --bucket "$FRONTEND_S3_BUCKET" --region $AWS_REGION \
              $( [ "$AWS_REGION" = "us-east-1" ] || echo --create-bucket-configuration LocationConstraint=$AWS_REGION )
          fi

      - name: Upload frontend to S3
        run: |
          aws s3 sync bookclub-app/frontend/build s3://${{ secrets.FRONTEND_S3_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
