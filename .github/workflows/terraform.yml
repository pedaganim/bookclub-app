name: Terraform Infra

on:
  workflow_dispatch:
  # Run automatically after app deploy succeeds so Serverless stack exports exist
  workflow_run:
    workflows: ["Deploy Booklub Prod"]
    types: ["completed"]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Ensure Terraform backend S3 bucket exists
        shell: bash
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
        run: |
          set -euo pipefail
          if aws s3api head-bucket --bucket "$TF_BACKEND_BUCKET" 2>/dev/null; then
            echo "Backend bucket exists: $TF_BACKEND_BUCKET"
          else
            echo "Creating backend bucket: $TF_BACKEND_BUCKET"
            aws s3api create-bucket --bucket "$TF_BACKEND_BUCKET" --region $AWS_REGION \
              $( [ "$AWS_REGION" = "us-east-1" ] || echo --create-bucket-configuration LocationConstraint=$AWS_REGION )
          fi

      - name: Ensure Terraform backend DynamoDB lock table exists
        shell: bash
        env:
          TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}
        run: |
          set -euo pipefail
          if aws dynamodb describe-table --table-name "$TF_BACKEND_DYNAMODB_TABLE" >/dev/null 2>&1; then
            echo "Lock table exists: $TF_BACKEND_DYNAMODB_TABLE"
          else
            echo "Creating lock table: $TF_BACKEND_DYNAMODB_TABLE"
            aws dynamodb create-table \
              --table-name "$TF_BACKEND_DYNAMODB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            # Wait until ACTIVE
            aws dynamodb wait table-exists --table-name "$TF_BACKEND_DYNAMODB_TABLE"
          fi

      - name: Terraform init (S3 backend)
        working-directory: bookclub-app/backend/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -input=false

      - name: Terraform plan
        working-directory: bookclub-app/backend/terraform
        env:
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_api_fqdn: api.booklub.shop
          TF_VAR_hosted_zone_id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
          TF_VAR_service_name: bookclub-app
          TF_VAR_stage: prod
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_frontend_bucket_name: ${{ secrets.FRONTEND_S3_BUCKET }}
        run: terraform plan -input=false

      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        working-directory: bookclub-app/backend/terraform
        env:
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_api_fqdn: api.booklub.shop
          TF_VAR_hosted_zone_id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
          TF_VAR_service_name: bookclub-app
          TF_VAR_stage: prod
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_frontend_bucket_name: ${{ secrets.FRONTEND_S3_BUCKET }}
        run: terraform apply -auto-approve -input=false
