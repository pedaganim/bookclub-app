Resources:
  CleanDescriptionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-${self:provider.stage}-clean-description-dlq
      MessageRetentionPeriod: 1209600 # 14 days

  EnrichGoogleMetadataDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-${self:provider.stage}-enrich-google-metadata-dlq
      MessageRetentionPeriod: 1209600 # 14 days

  ExtractBookMetadataDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:service}-${self:provider.stage}-extract-book-metadata-dlq
      MessageRetentionPeriod: 1209600 # 14 days

  # IAM role for DynamoDB table manager custom resource
  DynamoTableManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBTableManager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DeleteTable
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateTable
                  - dynamodb:UpdateTimeToLive
                  - dynamodb:DescribeTimeToLive
                  - dynamodb:ListStreams
                  - dynamodb:DescribeStream
                Resource:
                  - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-*-${self:provider.stage}

  # Permission for CloudFormation to invoke the custom resource
  DynamoTableManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DynamoTableManagerLambdaFunction
      Principal: cloudformation.amazonaws.com

  # IAM role for Event Source Mapping Manager custom resource
  EventSourceMappingManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EventSourceMappingManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:ListEventSourceMappings
                  - lambda:UpdateEventSourceMapping
                Resource: '*'

  # Permission for CloudFormation to invoke the event source mapping manager
  EventSourceMappingManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EventSourceMappingManagerLambdaFunction
      Principal: cloudformation.amazonaws.com

  # IAM role for Cognito IdP manager custom resource
  CognitoResourceManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoIdpManager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeIdentityProvider
                  - cognito-idp:CreateIdentityProvider
                  - cognito-idp:UpdateIdentityProvider
                  - cognito-idp:DeleteIdentityProvider
                Resource: "*"

  # Permission for CloudFormation to invoke Cognito IdP manager
  CognitoResourceManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoResourceManagerLambdaFunction
      Principal: cloudformation.amazonaws.com

  # IAM role for S3 bucket manager custom resource
  S3BucketManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3BucketManager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:HeadBucket
                  - s3:PutBucketCors
                  - s3:PutBucketPolicy
                  - s3:PutPublicAccessBlock
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::${self:service}-${self:provider.stage}-*

  # Permission for CloudFormation to invoke S3 bucket manager
  S3BucketManagerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref S3BucketManagerLambdaFunction
      Principal: cloudformation.amazonaws.com

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: ${self:service}-user-pool-${self:provider.stage}
      Schema:
        - Name: email
          Required: true
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ClientName: ${self:service}-client-${self:provider.stage}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      SupportedIdentityProviders:
        - COGNITO
        - Google
      CallbackURLs:
        - ${self:custom.appConfig.oauth.redirectSignIn}
      LogoutURLs:
        - ${self:custom.appConfig.oauth.redirectSignOut}

  GoogleIdentityProvider:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt CognitoResourceManagerLambdaFunction.Arn
      Action: CreateOrUpdateIdentityProvider
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: ${ssm:/bookclub/oauth/google_client_id}
        client_secret: ${ssm:/bookclub/oauth/google_client_secret}
        authorize_scopes: "openid email profile"
      AttributeMapping:
        email: email
        given_name: given_name
        family_name: family_name
        name: name

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Domain: ${self:custom.appConfig.userPoolDomainPrefix}-${self:provider.stage}
      UserPoolId: !Ref UserPool

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
        - !GetAtt UserPool.Arn

  GatewayResponseDefault4XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseDefault5XX:
    Type: 'AWS::ApiGateway::GatewayResponse'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  # DynamoDB Tables
  # BooksTable switched to CustomResource (create-if-missing)
  BooksTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-books-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: bookId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: bookId
          KeyType: HASH
      StreamSpecification:
        StreamEnabled: true
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  # Explicit EventSourceMapping to wire DynamoDB Stream to the stream processor Lambda
  BooksTableStreamToProcessor:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt BooksTable.StreamArn
      FunctionName: !GetAtt BooksStreamProcessorLambdaFunction.Arn
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      StartingPosition: LATEST
      Enabled: true

  # Ensure mapping is enabled (reassert after any stream ARN rotation)
  EnsureBooksStreamMappingEnabled:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EventSourceMappingManagerLambdaFunction.Arn
      FunctionName: !GetAtt BooksStreamProcessorLambdaFunction.Arn
      EventSourceArn: !GetAtt BooksTable.StreamArn
    DependsOn:
      - BooksTableStreamToProcessor

  DmConversationsTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-dm-conversations-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: conversationId
          AttributeType: S
        - AttributeName: userAId
          AttributeType: S
        - AttributeName: userBId
          AttributeType: S
        - AttributeName: lastMessageAt
          AttributeType: S
      KeySchema:
        - AttributeName: conversationId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserAIndex
          KeySchema:
            - AttributeName: userAId
              KeyType: HASH
            - AttributeName: lastMessageAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UserBIndex
          KeySchema:
            - AttributeName: userBId
              KeyType: HASH
            - AttributeName: lastMessageAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DmMessagesTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-dm-messages-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: conversationId
          AttributeType: S
        - AttributeName: messageId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: conversationId
          KeyType: HASH
        - AttributeName: messageId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ConversationCreatedAtIndex
          KeySchema:
            - AttributeName: conversationId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UsersTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-users-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MetadataCacheTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-metadata-cache-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: cacheKey
          AttributeType: S
      KeySchema:
        - AttributeName: cacheKey
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BookclubGroupsTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-bookclub-groups-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: groupId
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
      KeySchema:
        - AttributeName: groupId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedByIndex
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BookclubMembersTable:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
      TableName: ${self:service}-bookclub-members-${self:provider.stage}
      AttributeDefinitions:
        - AttributeName: groupId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: groupId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # S3 Bucket for book covers (create-if-missing via custom resource)
  BookCoversBucket:
    Type: AWS::CloudFormation::CustomResource
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt S3BucketManagerLambdaFunction.Arn
      BucketName: ${self:service}-${self:provider.stage}-book-covers
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      EnablePublicRead: true

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: ${self:service}-${self:provider.stage}-UserPoolId
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: ${self:service}-${self:provider.stage}-UserPoolClientId
  RestApiId:
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: ${self:service}-${self:provider.stage}-RestApiId
  ApiUrl:
    Value: !Join ["", ["https://", !Ref ApiGatewayRestApi, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"]]
  BookCoversBucketName:
    Value: ${self:service}-${self:provider.stage}-book-covers
