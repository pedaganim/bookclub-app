service: bookclub-app
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.appConfig.region}
  ecr:
    images:
      ocrworker:
        path: ocr-worker
        file: Dockerfile
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    COGNITO_USER_POOL_ID: !Ref UserPool
    COGNITO_CLIENT_ID: !Ref UserPoolClient
    BOOK_COVERS_BUCKET: ${self:service}-${self:provider.stage}-book-covers
    NOTIFY_FROM_EMAIL: ${env:NOTIFY_FROM_EMAIL, 'notify@booklub.shop'}
    ADMIN_NOTIFY_EMAIL: ${env:ADMIN_NOTIFY_EMAIL, 'madhukar.pedagani@gmail.com'}
    EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    EVENT_BUS_SOURCE: ${env:EVENT_BUS_SOURCE, 'bookclub.app'}
    ENABLE_IMAGE_ENRICHMENT: ${env:ENABLE_IMAGE_ENRICHMENT, 'false'}
    ENABLE_STREAM_ENRICHMENT: ${env:ENABLE_STREAM_ENRICHMENT, 'true'}
    # Vision LLM API Configuration (Optional - services gracefully fallback to mocks)
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    ANTHROPIC_API_KEY: ${env:ANTHROPIC_API_KEY, ''}
    VISION_LLM_PROVIDER: ${env:VISION_LLM_PROVIDER, 'openai'}
    # Bedrock vision model (Claude 3 family recommended)
    BEDROCK_MODEL_ID: ${env:BEDROCK_MODEL_ID, 'anthropic.claude-3-5-sonnet-20240620-v1:0'}
    OLLAMA_ENDPOINT: ${env:OLLAMA_ENDPOINT, ''}
    OLLAMA_MODEL: ${env:OLLAMA_MODEL, ''}
    # MCP analyzer debug logging (set to 'true' to enable verbose logs)
    MCP_DEBUG: ${env:MCP_DEBUG, ''}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-books-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-users-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-metadata-cache-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-groups-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-members-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-conversations-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-messages-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-books-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-users-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-metadata-cache-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-groups-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-members-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-conversations-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-messages-${self:provider.stage}/index/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:service}-${self:provider.stage}-book-covers/*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminDeleteUser
            - cognito-idp:GetUser
          Resource: !GetAtt UserPool.Arn
        - Effect: Allow
          Action:
            - textract:DetectDocumentText
            - textract:AnalyzeDocument
          Resource: "*"
        - Effect: Allow
          Action:
            - transcribe:StartTranscriptionJob
            - transcribe:GetTranscriptionJob
            - transcribe:DeleteTranscriptionJob
          Resource: "*"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            - dynamodb:GetShardIterator
            - dynamodb:GetRecords
          Resource: "*"

custom:
  appConfig: ${file(./config/app.${self:provider.stage}.json)}
  serverless-offline:
    httpPort: 4000
    resourceRoutes: true
    # Mock AWS services for offline development
    environment:
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

plugins:
  - serverless-offline
  - serverless-plugin-existing-s3
functions:
  # Book-related functions
  createBook:
    handler: src/handlers/books/create.handler
    events:
      - http:
          method: POST
          path: /books
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  getUserPublic:
    handler: src/handlers/users/getById.handler
    events:
      - http:
          method: GET
          path: /users/{userId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  findUserByEmail:
    handler: src/handlers/users/findByEmail.handler
    events:
      - http:
          method: GET
          path: /users/query
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmMarkRead:
    handler: src/handlers/dm/markRead.handler
    events:
      - http:
          method: PATCH
          path: /dm/conversations/{conversationId}/read
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Direct Messages (DM)
  dmCreateConversation:
    handler: src/handlers/dm/createConversation.handler
    events:
      - http:
          method: POST
          path: /dm/conversations
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmListConversations:
    handler: src/handlers/dm/listConversations.handler
    events:
      - http:
          method: GET
          path: /dm/conversations
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmSendMessage:
    handler: src/handlers/dm/sendMessage.handler
    events:
      - http:
          method: POST
          path: /dm/conversations/{conversationId}/messages
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmListMessages:
    handler: src/handlers/dm/listMessages.handler
    events:
      - http:
          method: GET
          path: /dm/conversations/{conversationId}/messages
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  getBook:
    handler: src/handlers/books/get.handler
    events:
      - http:
          method: GET
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  listBooks:
    handler: src/handlers/books/list.handler
    events:
      - http:
          method: GET
          path: /books
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  updateBook:
    handler: src/handlers/books/update.handler
    events:
      - http:
          method: PUT
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  deleteBook:
    handler: src/handlers/books/delete.handler
    events:
      - http:
          method: DELETE
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # Advanced metadata extraction API endpoint
  extractBookMetadataAPI:
    handler: src/handlers/books/extractMetadata.handler
    events:
      - http:
          method: POST
          path: /books/{bookId}/extract-metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  bookMetadata:
    handler: src/handlers/books/metadata.handler
    events:
      - http:
          method: GET
          path: /books/metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # User-related functions
  registerUser:
    handler: src/handlers/users/register.handler
    events:
      - http:
          method: POST
          path: /auth/register
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  loginUser:
    handler: src/handlers/users/login.handler
    events:
      - http:
          method: POST
          path: /auth/login
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  getUserProfile:
    handler: src/handlers/users/getProfile.handler
    events:
      - http:
          method: GET
          path: /users/me
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  updateUserProfile:
    handler: src/handlers/users/updateProfile.handler
    events:
      - http:
          method: PUT
          path: /users/me
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # Notification preference functions
  getNotificationPrefs:
    handler: src/handlers/notifications/getPrefs.handler
    events:
      - http:
          path: users/me/notifications
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setNotificationPrefs:
    handler: src/handlers/notifications/setPrefs.handler
    events:
      - http:
          path: users/me/notifications
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  # File upload
  generateUploadUrl:
    handler: src/handlers/files/generateUploadUrl.handler
    events:
      - http:
          method: POST
          path: /upload-url
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # Image metadata extraction
  extractImageMetadata:
    handler: src/handlers/images/extractMetadata.handler
    events:
      - http:
          method: POST
          path: /images/extract-metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # List user's extracted image metadata
  listImageMetadata:
    handler: src/handlers/images/listMetadata.handler
    events:
      - http:
          method: GET
          path: /images/metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # Automatic image processing on upload
  processImageUpload:
    handler: src/handlers/images/processUpload.handler
    events:
      - s3:
          bucket: ${self:service}-${self:provider.stage}-book-covers
          event: s3:ObjectCreated:*
          rules:
            - prefix: book-covers/
          existing: true

  # Advanced metadata extraction triggered by EventBridge
  extractBookMetadata:
    handler: src/handlers/images/extractBookMetadata.handler
    timeout: 300  # Allow up to 5 minutes for complex metadata extraction
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'S3.ObjectCreated'
          deadLetterQueueArn: !GetAtt ExtractBookMetadataDLQ.Arn
          retryPolicy:
            maximumRetryAttempts: 2

  # Event-driven processors
  cleanDescription:
    handler: src/handlers/books/cleanDescription.handler
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'Book.TextractCompleted'
              - 'Book.EnrichmentRequested'
          deadLetterQueueArn: !GetAtt CleanDescriptionDLQ.Arn
          retryPolicy:
            maximumRetryAttempts: 3

  enrichGoogleMetadata:
    handler: src/handlers/books/enrichGoogleMetadata.handler
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'Book.MCPAnalyzedCompleted'
<<<<<<< HEAD
=======
              - 'Book.StrandsAnalyzedCompleted'
>>>>>>> e033be9 (Strands + Bedrock: add Bedrock analyzer helper, Lambda handler, serverless wiring, and architecture docs; wire Google enrichment after Strands event)
          deadLetterQueueArn: !GetAtt EnrichGoogleMetadataDLQ.Arn
          retryPolicy:
            maximumRetryAttempts: 3

  # DynamoDB Streams processor for Books table (event mapping added via Resources since table is a CustomResource)
  booksStreamProcessor:
    handler: src/handlers/books/streamProcessor.handler

  # MCP analyzer: runs after Google metadata enrichment
  mcpAnalyzeImage:
    handler: src/handlers/books/mcpAnalyzeImage.handler
    environment:
      ENABLE_MCP_ANALYZER: ${env:ENABLE_MCP_ANALYZER, 'true'}
      MCP_OCR_WORKER_NAME: !Ref McpOcrWorkerLambdaFunction
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'Book.CleanDescriptionCompleted'

  # Optional OCR worker (scaffold). In production, convert this to a container image function.
  # For now, it is defined for reference and can be deployed separately with proper dependencies.
  mcpOcrWorker:
    image:
      name: ocrworker
    timeout: 60
    memorySize: 2048
    architecture: x86_64
    environment:
      PYTHONUNBUFFERED: '1'
# Club-related functions
  createClub:
    handler: src/handlers/clubs/create.handler
    events:
      - http:
          method: POST
          path: /clubs
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  getClub:
    handler: src/handlers/clubs/get.handler
    events:
      - http:
          method: GET
          path: /clubs/{clubId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  listUserClubs:
    handler: src/handlers/clubs/list.handler
    events:
      - http:
          method: GET
          path: /clubs
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  joinClub:
    handler: src/handlers/clubs/join.handler
    events:
      - http:
          method: POST
          path: /clubs/join
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  leaveClub:
    handler: src/handlers/clubs/leave.handler
    events:
      - http:
          method: DELETE
          path: /clubs/{clubId}/leave
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  updateClub:
    handler: src/handlers/clubs/update.handler
    events:
      - http:
          method: PATCH
          path: /clubs/{clubId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteClub:
    handler: src/handlers/clubs/delete.handler
    events:
      - http:
          method: DELETE
          path: /clubs/{clubId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Public browse clubs (no authorizer)
  browseClubs:
    handler: src/handlers/clubs/browse.handler
    events:
      - http:
          method: GET
          path: /clubs/browse
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  # Strands + Bedrock analyzer endpoint (HTTP + can be invoked by EventBridge detail)
  bedrockAnalyzeCover:
    handler: src/handlers/strands/bedrockAnalyzeCover.handler
    timeout: 60
    memorySize: 1536
    events:
      - http:
          method: POST
          path: /strands/analyze-cover
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
      - s3:
          bucket: ${self:service}-${self:provider.stage}-book-covers
          event: s3:ObjectCreated:*
          rules:
            - prefix: book-covers/
          existing: true
  # Admin endpoints to manage join requests
  listJoinRequests:
    handler: src/handlers/clubs/listRequests.handler
    events:
      - http:
          method: GET
          path: /clubs/{clubId}/requests
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  approveJoinRequest:
    handler: src/handlers/clubs/approveRequest.handler
    events:
      - http:
          method: POST
          path: /clubs/{clubId}/requests/{userId}/approve
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  rejectJoinRequest:
    handler: src/handlers/clubs/rejectRequest.handler
    events:
      - http:
          method: POST
          path: /clubs/{clubId}/requests/{userId}/reject
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Request to join a club (member action)
  requestJoinClub:
    handler: src/handlers/clubs/request.handler
    events:
      - http:
          method: POST
          path: /clubs/{clubId}/request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Custom resource function for DynamoDB table management
  dynamoTableManager:
    handler: src/custom-resources/dynamodb-table-manager.handler
    timeout: 300
    role: DynamoTableManagerRole

  # Custom resource to ensure Event Source Mapping is enabled post-deploy
  eventSourceMappingManager:
    handler: src/custom-resources/event-source-mapping-manager.handler
    timeout: 120
    role: EventSourceMappingManagerRole

  # Custom resource function for Cognito IdP create-or-update
  cognitoResourceManager:
    handler: src/custom-resources/cognito-resource-manager.handler
    timeout: 300
    role: CognitoResourceManagerRole

  # Custom resource function for S3 bucket management
  s3BucketManager:
    handler: src/custom-resources/s3-bucket-manager.handler
    timeout: 300
    role: S3BucketManagerRole

  # Voice search transcription function
  voiceTranscribe:
    handler: src/handlers/voice/transcribe.handler
    events:
      - http:
          method: POST
          path: /voice/transcribe
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
      - http:
          method: OPTIONS
          path: /voice/transcribe
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

resources: ${file(./cloudformation-resources.yml)}
