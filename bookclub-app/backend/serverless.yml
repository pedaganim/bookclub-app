service: bookclub-app
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.appConfig.region}
  ecr:
    images:
      ocrworker:
        path: ocr-worker
        file: Dockerfile
  environment:
    STAGE: ${self:provider.stage}
    COGNITO_USER_POOL_ID: !Ref UserPool
    COGNITO_CLIENT_ID: !Ref UserPoolClient
    BOOK_COVERS_BUCKET: ${self:service}-${self:provider.stage}-book-covers
    NOTIFY_FROM_EMAIL: ${env:NOTIFY_FROM_EMAIL, 'notify@booklub.shop'}
    ADMIN_NOTIFY_EMAIL: ${env:ADMIN_NOTIFY_EMAIL, 'madhukar.pedagani@gmail.com'}
    EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    EVENT_BUS_SOURCE: ${env:EVENT_BUS_SOURCE, 'bookclub.app'}
    ENABLE_IMAGE_ENRICHMENT: ${env:ENABLE_IMAGE_ENRICHMENT, 'false'}
    ENABLE_STREAM_ENRICHMENT: ${env:ENABLE_STREAM_ENRICHMENT, 'true'}
    # Vision LLM API Configuration (Optional - services gracefully fallback to mocks)
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    ANTHROPIC_API_KEY: ${env:ANTHROPIC_API_KEY, ''}
    VISION_LLM_PROVIDER: ${env:VISION_LLM_PROVIDER, 'openai'}
    # MCP analyzer debug logging (set to 'true' to enable verbose logs)
    MCP_DEBUG: ${env:MCP_DEBUG, ''}
    # Bedrock vision model (Claude 3 family recommended)
    BEDROCK_MODEL_ID: ${env:BEDROCK_MODEL_ID, 'anthropic.claude-3-5-sonnet-20240620-v1:0'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-books-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-users-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-metadata-cache-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-groups-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-members-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-conversations-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-messages-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-books-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-users-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-metadata-cache-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-groups-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-bookclub-members-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-conversations-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-dm-messages-${self:provider.stage}/index/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:service}-${self:provider.stage}-book-covers/*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminDeleteUser
            - cognito-idp:GetUser
          Resource: !GetAtt UserPool.Arn
        - Effect: Allow
          Action:
            - textract:DetectDocumentText
            - textract:AnalyzeDocument
          Resource: "*"
        - Effect: Allow
          Action:
            - transcribe:StartTranscriptionJob
            - transcribe:GetTranscriptionJob
            - transcribe:DeleteTranscriptionJob
          Resource: "*"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            - dynamodb:GetShardIterator
            - dynamodb:GetRecords
          Resource: "*"

custom:
  appConfig: ${file(./config/app.${self:provider.stage}.json)}
  serverless-offline:
    httpPort: 4000
    resourceRoutes: true
    # Mock AWS services for offline development
    environment:
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

plugins:
  - serverless-offline
  - serverless-plugin-existing-s3
functions:
  # Book-related functions
  createBook:
    handler: src/handlers/books/create.handler
    events:
      - http:
          method: POST
          path: /books
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  # Strands + Bedrock analyzer endpoint (HTTP + can be invoked by S3)
  bedrockAnalyzeCover:
    handler: src/handlers/strands/bedrockAnalyzeCover.handler
    timeout: 30
    memorySize: 1536
    events:
      - http:
          method: POST
          path: /strands/analyze-cover
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  getUserPublic:
    handler: src/handlers/users/getById.handler
    events:
      - http:
          method: GET
          path: /users/{userId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  findUserByEmail:
    handler: src/handlers/users/findByEmail.handler
    events:
      - http:
          method: GET
          path: /users/query
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmMarkRead:
    handler: src/handlers/dm/markRead.handler
    events:
      - http:
          method: PATCH
          path: /dm/conversations/{conversationId}/read
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Direct Messages (DM)
  dmCreateConversation:
    handler: src/handlers/dm/createConversation.handler
    events:
      - http:
          method: POST
          path: /dm/conversations
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmListConversations:
    handler: src/handlers/dm/listConversations.handler
    events:
      - http:
          method: GET
          path: /dm/conversations
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmSendMessage:
    handler: src/handlers/dm/sendMessage.handler
    events:
      - http:
          method: POST
          path: /dm/conversations/{conversationId}/messages
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  dmListMessages:
    handler: src/handlers/dm/listMessages.handler
    events:
      - http:
          method: GET
          path: /dm/conversations/{conversationId}/messages
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  getBook:
    handler: src/handlers/books/get.handler
    events:
      - http:
          method: GET
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  listBooks:
    handler: src/handlers/books/list.handler
    events:
      - http:
          method: GET
          path: /books
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  updateBook:
    handler: src/handlers/books/update.handler
    events:
      - http:
          method: PUT
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  deleteBook:
    handler: src/handlers/books/delete.handler
    events:
      - http:
          method: DELETE
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # Advanced metadata extraction API endpoint
  extractBookMetadataAPI:
    handler: src/handlers/books/extractMetadata.handler
    events:
      - http:
          method: POST
          path: /books/{bookId}/extract-metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  bookMetadata:
    handler: src/handlers/books/metadata.handler
    events:
      - http:
          method: GET
          path: /books/metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # User-related functions
  registerUser:
    handler: src/handlers/users/register.handler
    events:
      - http:
          method: POST
          path: /auth/register
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  loginUser:
    handler: src/handlers/users/login.handler
    events:
      - http:
          method: POST
          path: /auth/login
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  getUserProfile:
    handler: src/handlers/users/getProfile.handler
    events:
      - http:
          method: GET
          path: /users/me
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  updateUserProfile:
    handler: src/handlers/users/updateProfile.handler
    events:
      - http:
          method: PUT
          path: /users/me
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # Notification preference functions
  getNotificationPrefs:
    handler: src/handlers/notifications/getPrefs.handler
    events:
      - http:
          path: users/me/notifications
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  setNotificationPrefs:
    handler: src/handlers/notifications/setPrefs.handler
    events:
      - http:
          path: users/me/notifications
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  # File upload
  generateUploadUrl:
    handler: src/handlers/files/generateUploadUrl.handler
    events:
      - http:
          method: POST
          path: /upload-url
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # Image metadata extraction
  extractImageMetadata:
    handler: src/handlers/images/extractMetadata.handler
    events:
      - http:
          method: POST
          path: /images/extract-metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # List user's extracted image metadata
  listImageMetadata:
    handler: src/handlers/images/listMetadata.handler
    events:
      - http:
          method: GET
          path: /images/metadata
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # Automatic image processing on upload
  processImageUpload:
    handler: src/handlers/images/processUpload.handler
    events:
      - s3:
          bucket: ${self:service}-${self:provider.stage}-book-covers
          event: s3:ObjectCreated:*
          rules:
            - prefix: book-covers/
          existing: true

  # Advanced metadata extraction triggered by EventBridge
  extractBookMetadata:
    handler: src/handlers/images/extractBookMetadata.handler
    timeout: 300  # Allow up to 5 minutes for complex metadata extraction
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'S3.ObjectCreated'
          deadLetterQueueArn: !GetAtt ExtractBookMetadataDLQ.Arn
          retryPolicy:
            maximumRetryAttempts: 2

  # Event-driven processors
  cleanDescription:
    handler: src/handlers/books/cleanDescription.handler
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'Book.TextractCompleted'
              - 'Book.EnrichmentRequested'
          deadLetterQueueArn: !GetAtt CleanDescriptionDLQ.Arn
          retryPolicy:
            maximumRetryAttempts: 3

  enrichGoogleMetadata:
    handler: src/handlers/books/enrichGoogleMetadata.handler
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'Book.MCPAnalyzedCompleted'
              - 'Book.StrandsAnalyzedCompleted'
          deadLetterQueueArn: !GetAtt EnrichGoogleMetadataDLQ.Arn
          retryPolicy:
            maximumRetryAttempts: 3

  # DynamoDB Streams processor for Books table (event mapping added via Resources since table is a CustomResource)
  booksStreamProcessor:
    handler: src/handlers/books/streamProcessor.handler

  # MCP analyzer: runs after Google metadata enrichment
  mcpAnalyzeImage:
    handler: src/handlers/books/mcpAnalyzeImage.handler
    environment:
      ENABLE_MCP_ANALYZER: ${env:ENABLE_MCP_ANALYZER, 'true'}
      MCP_OCR_WORKER_NAME: !Ref McpOcrWorkerLambdaFunction
    events:
      - eventBridge:
          eventBus: ${self:provider.environment.EVENT_BUS_NAME}
          pattern:
            source:
              - ${self:provider.environment.EVENT_BUS_SOURCE}
            detail-type:
              - 'Book.CleanDescriptionCompleted'

  # Optional OCR worker (scaffold). In production, convert this to a container image function.
  # For now, it is defined for reference and can be deployed separately with proper dependencies.
  mcpOcrWorker:
    image:
      name: ocrworker
    timeout: 60
    memorySize: 2048
    architecture: x86_64
    environment:
      PYTHONUNBUFFERED: '1'
# Club-related functions
  createClub:
    handler: src/handlers/clubs/create.handler
    events:
      - http:
          method: POST
          path: /clubs
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  getClub:
    handler: src/handlers/clubs/get.handler
    events:
      - http:
          method: GET
          path: /clubs/{clubId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  listUserClubs:
    handler: src/handlers/clubs/list.handler
    events:
      - http:
          method: GET
          path: /clubs
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  joinClub:
    handler: src/handlers/clubs/join.handler
    events:
      - http:
          method: POST
          path: /clubs/join
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  leaveClub:
    handler: src/handlers/clubs/leave.handler
    events:
      - http:
          method: DELETE
          path: /clubs/{clubId}/leave
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  updateClub:
    handler: src/handlers/clubs/update.handler
    events:
      - http:
          method: PATCH
          path: /clubs/{clubId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteClub:
    handler: src/handlers/clubs/delete.handler
    events:
      - http:
          method: DELETE
          path: /clubs/{clubId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Public browse clubs (no authorizer)
  browseClubs:
    handler: src/handlers/clubs/browse.handler
    events:
      - http:
          method: GET
          path: /clubs/browse
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

  # Admin endpoints to manage join requests
  listJoinRequests:
    handler: src/handlers/clubs/listRequests.handler
    events:
      - http:
          method: GET
          path: /clubs/{clubId}/requests
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  approveJoinRequest:
    handler: src/handlers/clubs/approveRequest.handler
    events:
      - http:
          method: POST
          path: /clubs/{clubId}/requests/{userId}/approve
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  rejectJoinRequest:
    handler: src/handlers/clubs/rejectRequest.handler
    events:
      - http:
          method: POST
          path: /clubs/{clubId}/requests/{userId}/reject
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Request to join a club (member action)
  requestJoinClub:
    handler: src/handlers/clubs/request.handler
    events:
      - http:
          method: POST
          path: /clubs/{clubId}/request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Custom resource function for DynamoDB table management
  dynamoTableManager:
    handler: src/custom-resources/dynamodb-table-manager.handler
    timeout: 300
    role: DynamoTableManagerRole

  # Custom resource to ensure Event Source Mapping is enabled post-deploy
  eventSourceMappingManager:
    handler: src/custom-resources/event-source-mapping-manager.handler
    timeout: 120
    role: EventSourceMappingManagerRole

  # Custom resource function for Cognito IdP create-or-update
  cognitoResourceManager:
    handler: src/custom-resources/cognito-resource-manager.handler
    timeout: 300
    role: CognitoResourceManagerRole

  # Custom resource function for S3 bucket management
  s3BucketManager:
    handler: src/custom-resources/s3-bucket-manager.handler
    timeout: 300
    role: S3BucketManagerRole

  # Voice search transcription function
  voiceTranscribe:
    handler: src/handlers/voice/transcribe.handler
    events:
      - http:
          method: POST
          path: /voice/transcribe
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
      - http:
          method: OPTIONS
          path: /voice/transcribe
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true

resources:
  Resources:
    CleanDescriptionDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-clean-description-dlq
        MessageRetentionPeriod: 1209600 # 14 days

    EnrichGoogleMetadataDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-enrich-google-metadata-dlq
        MessageRetentionPeriod: 1209600 # 14 days

    ExtractBookMetadataDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-extract-book-metadata-dlq
        MessageRetentionPeriod: 1209600 # 14 days
    # IAM role for DynamoDB table manager custom resource
    DynamoTableManagerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: DynamoDBTableManager
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:CreateTable
                    - dynamodb:DeleteTable
                    - dynamodb:DescribeTable
                    - dynamodb:UpdateTable
                    - dynamodb:UpdateTimeToLive
                    - dynamodb:DescribeTimeToLive
                    - dynamodb:ListStreams
                    - dynamodb:DescribeStream
                  Resource: 
                    - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-*-${self:provider.stage}

    # Permission for CloudFormation to invoke the custom resource
    DynamoTableManagerInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref DynamoTableManagerLambdaFunction
        Principal: cloudformation.amazonaws.com

    # IAM role for Event Source Mapping Manager custom resource
    EventSourceMappingManagerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: EventSourceMappingManagerPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:ListEventSourceMappings
                    - lambda:UpdateEventSourceMapping
                  Resource: '*'

    # Permission for CloudFormation to invoke the event source mapping manager
    EventSourceMappingManagerInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref EventSourceMappingManagerLambdaFunction
        Principal: cloudformation.amazonaws.com


    # IAM role for Cognito IdP manager custom resource
    CognitoResourceManagerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: CognitoIdpManager
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:DescribeIdentityProvider
                    - cognito-idp:CreateIdentityProvider
                    - cognito-idp:UpdateIdentityProvider
                    - cognito-idp:DeleteIdentityProvider
                  Resource: "*"

    # Permission for CloudFormation to invoke Cognito IdP manager
    CognitoResourceManagerInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref CognitoResourceManagerLambdaFunction
        Principal: cloudformation.amazonaws.com

    # IAM role for S3 bucket manager custom resource
    S3BucketManagerRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: S3BucketManager
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:CreateBucket
                    - s3:DeleteBucket
                    - s3:HeadBucket
                    - s3:PutBucketCors
                    - s3:PutBucketPolicy
                    - s3:PutPublicAccessBlock
                    - s3:GetBucketLocation
                    - s3:ListBucket
                  Resource: 
                    - arn:aws:s3:::${self:service}-${self:provider.stage}-*

    # Permission for CloudFormation to invoke S3 bucket manager
    S3BucketManagerInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref S3BucketManagerLambdaFunction
        Principal: cloudformation.amazonaws.com

    UserPool:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: true
        AutoVerifiedAttributes:
          - email

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ClientName: ${self:service}-client-${self:provider.stage}
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        SupportedIdentityProviders:
          - COGNITO
          - Google
        CallbackURLs:
          - ${self:custom.appConfig.oauth.redirectSignIn}
        LogoutURLs:
          - ${self:custom.appConfig.oauth.redirectSignOut}

    GoogleIdentityProvider:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt CognitoResourceManagerLambdaFunction.Arn
        Action: CreateOrUpdateIdentityProvider
        UserPoolId: !Ref UserPool
        ProviderName: Google
        ProviderType: Google
        ProviderDetails:
          client_id: ${ssm:/bookclub/oauth/google_client_id}
          client_secret: ${ssm:/bookclub/oauth/google_client_secret}
          authorize_scopes: "openid email profile"
        AttributeMapping:
          email: email
          given_name: given_name
          family_name: family_name
          name: name

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        Domain: ${self:custom.appConfig.userPoolDomainPrefix}-${self:provider.stage}
        UserPoolId: !Ref UserPool

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt UserPool.Arn

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

    # DynamoDB Tables
    # BooksTable switched to CustomResource (create-if-missing)
    BooksTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-books-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        StreamSpecification:
          StreamEnabled: true
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

    # Explicit EventSourceMapping to wire DynamoDB Stream to the stream processor Lambda
    BooksTableStreamToProcessor:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        EventSourceArn: !GetAtt BooksTable.StreamArn
        FunctionName: !GetAtt BooksStreamProcessorLambdaFunction.Arn
        BatchSize: 10
        MaximumBatchingWindowInSeconds: 5
        StartingPosition: LATEST
        Enabled: true

    # Ensure mapping is enabled (reassert after any stream ARN rotation)
    EnsureBooksStreamMappingEnabled:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken: !GetAtt EventSourceMappingManagerLambdaFunction.Arn
        FunctionName: !GetAtt BooksStreamProcessorLambdaFunction.Arn
        EventSourceArn: !GetAtt BooksTable.StreamArn
      DependsOn:
        - BooksTableStreamToProcessor

    DmConversationsTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-dm-conversations-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
          - AttributeName: userAId
            AttributeType: S
          - AttributeName: userBId
            AttributeType: S
          - AttributeName: lastMessageAt
            AttributeType: S
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserAIndex
            KeySchema:
              - AttributeName: userAId
                KeyType: HASH
              - AttributeName: lastMessageAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: UserBIndex
            KeySchema:
              - AttributeName: userBId
                KeyType: HASH
              - AttributeName: lastMessageAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DmMessagesTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-dm-messages-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
          - AttributeName: messageId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
          - AttributeName: messageId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ConversationCreatedAtIndex
            KeySchema:
              - AttributeName: conversationId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    UsersTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    MetadataCacheTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-metadata-cache-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    BookclubGroupsTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-bookclub-groups-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: createdBy
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreatedByIndex
            KeySchema:
              - AttributeName: createdBy
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    BookclubMembersTable:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt DynamoTableManagerLambdaFunction.Arn
        TableName: ${self:service}-bookclub-members-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # S3 Bucket for book covers (create-if-missing via custom resource)
    BookCoversBucket:
      Type: AWS::CloudFormation::CustomResource
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        ServiceToken: !GetAtt S3BucketManagerLambdaFunction.Arn
        BucketName: ${self:service}-${self:provider.stage}-book-covers
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 3000
        EnablePublicRead: true

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-UserPoolId
    UserPoolClientId:
      Value: !Ref UserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-UserPoolClientId
    RestApiId:
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-RestApiId
    ApiUrl:
      Value: !Join ["", ["https://", !Ref ApiGatewayRestApi, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"]]
    BookCoversBucketName:
      Value: ${self:service}-${self:provider.stage}-book-covers
