service: bookclub-app
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.appConfig.region}
  environment:
    STAGE: ${self:provider.stage}
    COGNITO_USER_POOL_ID: !Ref UserPool
    COGNITO_CLIENT_ID: !Ref UserPoolClient
    BOOK_COVERS_BUCKET: ${self:service}-${self:provider.stage}-book-covers
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-books-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-users-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-groups-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-books-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-users-${self:provider.stage}/index/*
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:service}-groups-${self:provider.stage}/index/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::${self:service}-${self:provider.stage}-book-covers/*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminDeleteUser
            - cognito-idp:GetUser
          Resource: !GetAtt UserPool.Arn

custom:
  appConfig: ${file(./config/app.${self:provider.stage}.json)}
  serverless-offline:
    httpPort: 4000
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

plugins:
  - serverless-offline

functions:
  # Book-related functions
  createBook:
    handler: src/handlers/books/create.handler
    events:
      - http:
          method: POST
          path: /books
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  getBook:
    handler: src/handlers/books/get.handler
    events:
      - http:
          method: GET
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  listBooks:
    handler: src/handlers/books/list.handler
    events:
      - http:
          method: GET
          path: /books
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  updateBook:
    handler: src/handlers/books/update.handler
    events:
      - http:
          method: PUT
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  deleteBook:
    handler: src/handlers/books/delete.handler
    events:
      - http:
          method: DELETE
          path: /books/{bookId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # User-related functions
  registerUser:
    handler: src/handlers/users/register.handler
    events:
      - http:
          method: POST
          path: /auth/register
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  loginUser:
    handler: src/handlers/users/login.handler
    events:
      - http:
          method: POST
          path: /auth/login
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  getUserProfile:
    handler: src/handlers/users/getProfile.handler
    events:
      - http:
          method: GET
          path: /users/me
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  # File upload
  generateUploadUrl:
    handler: src/handlers/files/generateUploadUrl.handler
    events:
      - http:
          method: POST
          path: /upload-url
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

  # Group-related functions
  createGroup:
    handler: src/handlers/groups/create.handler
    events:
      - http:
          method: POST
          path: /groups
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  getGroup:
    handler: src/handlers/groups/get.handler
    events:
      - http:
          method: GET
          path: /groups/{groupId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  listGroups:
    handler: src/handlers/groups/list.handler
    events:
      - http:
          method: GET
          path: /groups
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  getNearbyGroups:
    handler: src/handlers/groups/nearby.handler
    events:
      - http:
          method: GET
          path: /groups/nearby
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
  
  joinGroup:
    handler: src/handlers/groups/join.handler
    events:
      - http:
          method: POST
          path: /groups/{groupId}/join
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
  
  leaveGroup:
    handler: src/handlers/groups/leave.handler
    events:
      - http:
          method: POST
          path: /groups/{groupId}/leave
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: 
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: true
        AutoVerifiedAttributes:
          - email

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - GoogleIdentityProvider
      Properties:
        ClientName: ${self:service}-client-${self:provider.stage}
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        PreventUserExistenceErrors: ENABLED
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        SupportedIdentityProviders:
          - COGNITO
          - Google
        CallbackURLs:
          - ${self:custom.appConfig.oauth.redirectSignIn}
        LogoutURLs:
          - ${self:custom.appConfig.oauth.redirectSignOut}

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.appConfig.userPoolDomainPrefix}-${self:provider.stage}
        UserPoolId: !Ref UserPool

    GoogleIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        ProviderType: Google
        UserPoolId: !Ref UserPool
        ProviderDetails:
          client_id: ${env:GOOGLE_CLIENT_ID}
          client_secret: ${env:GOOGLE_CLIENT_SECRET}
          authorize_scopes: 'openid profile email'
        AttributeMapping:
          email: email
          name: name

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt UserPool.Arn

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: ${self:service}-${self:provider.stage}-UserPoolId
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: ${self:service}-${self:provider.stage}-UserPoolClientId
  RestApiId:
    Value: !Ref ApiGatewayRestApi
    Export:
      Name: ${self:service}-${self:provider.stage}-RestApiId
  ApiUrl:
    Value: !Join ["", ["https://", !Ref ApiGatewayRestApi, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"]]
  BookCoversBucketName:
    Value: ${self:service}-${self:provider.stage}-book-covers

